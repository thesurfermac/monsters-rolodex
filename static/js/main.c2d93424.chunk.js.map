{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUACaA,EAAO,SAAAC,GAClB,OACE,sBAAKC,UAAU,iBAAf,UACA,qBAAKC,IAAI,UAAWC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACvB,6BAAML,EAAMI,QAAQE,OACpB,6BAAMN,EAAMI,QAAQG,YCDXC,EAAW,SAAAR,GAEtB,OAAQ,qBAAKC,UAAU,YAAf,SACND,EAAMS,SAASC,KACb,SAAAN,GAAO,OACL,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCRdM,G,MAAW,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OAGtB,uBAAOZ,UAAU,SACjBa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCoCGG,G,wDArCb,aAAc,IAAD,8BACX,gBAeFH,aAAa,SAACI,GACZ,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAftC,EAAKC,MAAQ,CACXb,SAAW,GACXU,YAAa,IAJJ,E,qDAUb,WAAoB,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAAUkB,S,oBAM1C,WAAS,IAAD,EAC4BC,KAAKN,MAA/Bb,EADF,EACEA,SAAUU,EADZ,EACYA,YACZU,EAAmBpB,EAASqB,QAAO,SAAA1B,GAAO,OAAIA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBACpG,OACE,sBAAK9B,UAAU,MAAf,UACA,kDACA,cAAC,EAAD,CAAWW,YAAY,kBAAkBC,aAAce,KAAKf,eAE5D,cAAC,EAAD,CAAUJ,SAAUoB,W,GA5BRI,cCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c2d93424.chunk.js","sourcesContent":["import \"./card.styles.css\";\r\nexport const Card = props =>{\r\n  return (\r\n    <div className=\"card-container\">\r\n    <img alt=\"monster\"  src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\r\n    <h1 >{props.monster.name}</h1>\r\n    <h2 >{props.monster.email}</h2>\r\n    </div>)\r\n}","import { Component } from \"react\";\r\nimport './card-list.styles.css';\r\nimport { Card } from \"../card/card.component\";\r\n\r\n\r\nexport const CardList = props =>{\r\n  \r\n  return (<div className=\"card-list\">{\r\n    props.monsters.map(\r\n      monster =>(\r\n        <Card key={monster.id} monster={monster}></Card>\r\n      )\r\n    )\r\n  }\r\n  </div>);\r\n}","\r\nimport './search-box.styles.css';\r\nexport const SearchBox= ({placeholder, handleChange})=>(\r\n\r\n\r\n  <input className='search' \r\n  type=\"search\" \r\n  placeholder={placeholder} \r\n  onChange={handleChange}\r\n    />\r\n);\r\n\r\n\r\n","import {Component} from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\nimport './App.css';\n\n\nclass App extends Component{\n  constructor(){\n    super();\n    this.state = {\n      monsters : [],\n      searchField: \"\",\n    }\n    \n    // this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters: users}));\n  }\n\n  handleChange=(e)=>{\n    this.setState({ searchField: e.target.value });\n  }\n  render(){\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()))\n    return (\n      <div className=\"App\">\n      <h1>Monsters Rolodex</h1>\n      <SearchBox placeholder=\"Search Monsters\" handleChange={this.handleChange\n        }/>\n      <CardList monsters={filteredMonsters}>\n      </CardList>\n        \n      </div>\n    );\n    \n  }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}